#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug  3 15:45:22 2023

@author: sealight
"""
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 20 20:12:54 2023

@author: sealight
"""
import flet as ft
import warnings,os
import pandas as pd
import numpy as np
from threading import Timer,Event
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
try:
    from geneSmartPth_mini import f_geneAbsPath_frmROOT
except:
    from files.geneSmartPth_mini import f_geneAbsPath_frmROOT

class ErrorCoding(Exception):
    pass


def main(page:ft.Page):
    #
    warnings.filterwarnings('ignore')
    page.title='iProp-p Ver 0.7'
    page.bgcolor="#f2f2f3"#f2f2f3
    page.window_width=1070
    page.window_height=950
    theme = ft.Theme()
    theme.page_transitions.android = "openUpwards"
    theme.page_transitions.ios = "cupertino"
    theme.page_transitions.macos = "fadeUpwards"
    theme.page_transitions.linux = "zoom"
    theme.page_transitions.windows = "zoom"
    page.theme = theme
    page.scroll = "adaptive"
    
    page.session.set('b_isSetCorCsv', False)
    page.session.set('b_isInCalc', False)
    page.session.set('b_isCalcFinish', False)
    page.session.set('b_isSetAutoML_model',False)
    page.session.set('b_isStat0_1', False)
    page.session.set('i_sampNum', 0)
    d_reapElems = dict()
    d_reapElems['b_isRsmpxSplit'] = False
    page.session.set('d_reapElems', d_reapElems)
    page.session.set('s_timeStamp', 0)
    page.session.set('b_isSaveResmpCsv', False)
    page.session.set('b_isSetTopFeat_num', True)
    page.session.set('b_isAutoMl_Done', False)
    page.session.set('b_isIn_interpCalc', False)
    page.session.set('i_allValidNum', -9)
    page.session.set('i_num0', -9)
    
    #dialog
    dlg = ft.AlertDialog(
        title=ft.Text("You selected the feature but didn't set the parameters"), on_dismiss=lambda e: print("Dialog dismissed!")
        )
    
    def open_dlg(e):
        page.dialog = dlg
        dlg.open = True
        page.update()
    
        
    def f_checkParaAndRange(v_1para,s_correctType,f_min=0,f_max=1):
        if isinstance(v_1para, type(s_correctType)):
            if isinstance(s_correctType, type(1)):
                if v_1para>=f_min and v_1para<=f_max:
                    return True,v_1para
                elif v_1para>f_max:
                    print(f'The parameter {v_1para} is not in the range:{f_min}~{f_max}')
                    print(f'To ensure that the program runs, {v_1para} is set to be {f_max}')
                    return True,f_max
                else:
                    raise ErrorCoding(f'Top-N number {v_1para} < the min value {f_min},it is not allowed')
            elif isinstance(s_correctType, type(0.01)):
                if v_1para>=f_min and v_1para<=f_max:
                    return True,v_1para
                elif v_1para>f_max:
                    print(f'The parameter {v_1para} is not in the range:{f_min}~{f_max}')
                    print(f'To ensure that the program runs, {v_1para} is set to be {f_max}')
                    return True,f_max
                else:
                    raise ErrorCoding(f'Top-N number {v_1para} < the min value {f_min},it is not allowed')
            elif isinstance(s_correctType, type('abc')):
                if os.path.exists(v_1para) and os.path.isfile(v_1para):
                    if os.path.splitext(v_1para)[-1] == '.csv':
                        text_csvinfo.value = v_1para
                        text_csvinfo.color = '#3152E6'
                        page.update()
                        return True,v_1para
                    else:
                        text_csvinfo.value = "You need to reset the csv file."
                        text_csvinfo.color = '#E631AD'
                        dlg.title.value = 'The file extension you provide should be ".csv'
                        e = Event()
                        open_dlg(e)
                        page.update()
                        return False,None
                else:
                    dlg.title.value = ''.join(['The file you set ',v_1para, ' does not exist. And it"s not a file'])
                    e = Event()
                    open_dlg(e)
                    page.update()
                    return False,None
            
        else:
            raise ErrorCoding(''.join(['The argument you provided is not of type ',s_correctType]))
    
    
    elem_help_title = ft.Row([ft.Text("Feature Auto Machine Learning", style="headlineMedium",color='#000000')],
                             alignment=ft.MainAxisAlignment.CENTER)

    imglogo = ft.Image(
        src_base64='''''',
        width=107,
        height=107,
        fit=ft.ImageFit.FIT_HEIGHT,
        repeat=ft.ImageRepeat.NO_REPEAT,
    )
    header = ft.Row(spacing=155,controls=[imglogo, elem_help_title])
    
    ##1#userGivenCsv
    el_placeholder = ft.Container(width=10)
    text_csvinfo = ft.Text("", style="BODY_MEDIUM",color="#4f6a8f")
    #1. pick files dialog
    def pick_csvflies_result(e: ft.FilePickerResultEvent):
        text_csvinfo.value=(
            ",".join(map(lambda f: f.name, e.files)) if e.files else "Cancelled!"
        )
        text_csvinfo.update()
        if text_csvinfo.value=="Cancelled!":
            page.session.set('b_isSetCorCsv', False)
        else:
            s_filePth = os.path.abspath(e.files[0].path)
            b_isOkPara,v_para = f_checkParaAndRange(s_filePth,'a')
            if b_isOkPara:
                page.session.set('b_isSetCorCsv', True)
                page.session.set("csvFilePth", s_filePth)
                page.session.set('b_isStat0_1', False)
                file_btn.disabled = True

    pick_csvFile_dialog = ft.FilePicker(on_result=pick_csvflies_result)
    file_btn = ft.ElevatedButton(
        "Select the feature csv file",
        height=40,
        color='#0079da',
        icon=ft.icons.UPLOAD_FILE,
        on_click=lambda _:pick_csvFile_dialog.pick_files(allow_multiple=False)
    )
    el_row_fileSlct_title = ft.Text("1. Set your feature csv file", size=21,color="#000000")
    el_row_fileSlct_form = ft.Row([el_placeholder,file_btn,text_csvinfo])
    page.overlay.extend([pick_csvFile_dialog])
    
    
    ###2. AutoML model selection
    def f_setAutoML(e):
        s_autoM_elemVal = ''
        try:
            s_autoM_elemVal = el_autoModel.value
            s_autoM_elemVal_lower = s_autoM_elemVal.lower()
            if s_autoM_elemVal_lower in ['flaml','mljar','tpot','lazypredict']:
                page.session.set('s_autoML_name', str(s_autoM_elemVal_lower))
                page.session.set('b_isSetAutoML_model',True)
                el_autoModel.disabled = True
            else:
                page.session.set('b_isSetAutoML_model', False)
        except:
            page.session.set('s_autoML_name', False)
    el_tit_autoMl = ft.Text('2. Select the auto ML model', size=21)
    el_autoModel = ft.Dropdown(
        width=220,
        options=[
            ft.dropdown.Option("FLAML"),
            # ft.dropdown.Option("MLJAR"),
            ft.dropdown.Option("TPOT"),
            ft.dropdown.Option("LazyPredict")
         ],
        on_change=f_setAutoML,
     )
    el_row_autoMod = ft.Row([el_tit_autoMl,el_autoModel])
    
    # #3. The resampling strategy selection
    def f_setResampParas(e):
        d_rsamp = {
            'Under sampling':'delete',
            'Over sampling': 'add',
            'Under+Over sampling':'both',
            'None. Using oirginal data.':'orig'
            }
        s_rsampMod = ''
        try:
            s_rsampMod = d_rsamp[el_rsmpFrom.value]
            if s_rsampMod in ['delete','add','both','orig']:
                page.session.set('s_rsmpMod_name',s_rsampMod)
                page.session.set('b_isSet_rsmpMod', True)
                el_rsmpFrom.disabled = True
            else:
                page.session.set('b_isSet_rsmpMod', False)
        except:
            page.session.set('b_isSet_rsmpMod', False)       
    el_tit_resmp = ft.Text('3. Set the resampling algorithm: ', size=21)
    el_rsmpFrom = ft.Dropdown(
        width=220,
        options=[
            ft.dropdown.Option("Under sampling"),
            ft.dropdown.Option("Over sampling"),
            ft.dropdown.Option("None. Using oirginal data."),
            ],
        on_change=f_setResampParas,
        )
    el_row_resampSet = ft.Row([el_tit_resmp,el_rsmpFrom])
    
    # #4. set the test set ratio
    def f_setTestRatio(e):
        s_userSetRatio = el_testRatio.value
        try:
            f_userSetRatio = float(s_userSetRatio)
            page.session.set('f_testRatio', f_userSetRatio)
            page.session.set('b_isSetTestRate', True)
            el_testRatio.disabled = True
        except:
            page.session.set('b_isSetTestRate', False)
    el_tit_testRatio = ft.Text('4. Set the ratio of the test dataset: ',size=21)
    el_testRatio = ft.Dropdown(
        width=220,
        options=[
            ft.dropdown.Option("0.1"),
            ft.dropdown.Option("0.15"),
            ft.dropdown.Option("0.2"),
            ],
        on_change=f_setTestRatio,
        )
    el_row_ratio = ft.Row([el_tit_testRatio,el_testRatio])
    
    # #5. Set the number of protein features to display
    def f_setVizFeatNo(e):
        s_visFeatNo = e.control.value
        if s_visFeatNo.isdigit():
            page.session.set('i_vizFeatNo', int(s_visFeatNo))
            page.session.set('b_isSetVizFeatNo', True)
            page.update()
        else:
            page.session.set('b_isSetVizFeatNo', False)
            dlg.title.value = 'What you have entered is not an integer in the specified range(In Step 5)'
            open_dlg(e)
            page.update()
    el_tit_vizFeatNo = ft.Text('5. Set the number of the test sample in the test set:  ',size=21)
    el_vizFeatNo = ft.TextField(label="Input here the No.", hint_text="1~x",
                                on_change=f_setVizFeatNo)
    el_posRangeHint = ft.Text('',color=ft.colors.BLUE)
    el_row_visFeatNo = ft.Row([el_tit_vizFeatNo,el_vizFeatNo,el_posRangeHint])
    
    # #6. set the number of top important features
    def f_setTopFeatNum(e):
        i_topNfeat_num = 0
        try:
            i_topNfeat_num = int(el_featNum_form.value)
        except:
            raise ErrorCoding('Wrong number in Step 6 setting')
        b_isOkPara,v_para = f_checkParaAndRange(i_topNfeat_num,0,0,page.session.get('i_colNum'))
        if b_isOkPara:
            page.session.set('i_topFeats_num', v_para)
            page.session.set('b_isSetTopFeat_num', True)
            el_featNum_form.disabled = True
            el_featNum_form.update()
        else:
            page.session.set('b_isSetTopFeat_num', False)
            raise ErrorCoding('The input number is not in the right range(0~N)')
            page.update()
    el_tit_topFeatNum = ft.Text('6. Set the number of important features: ',size=21)
    el_featNum_form = ft.Dropdown(
        width=220,
        options=[
            ft.dropdown.Option("15"),
            ft.dropdown.Option("20"),
            ft.dropdown.Option("10"),
            ],
        on_change=f_setTopFeatNum,
        )
    el_row_topFeatSet = ft.Row([el_tit_topFeatNum,el_featNum_form])
    
    # #set the interpretation model
    def f_setInterpClfer(e):
        s_optionVal = el_cliferSlct.value
        page.session.set('s_interpClfer', s_optionVal)
        page.session.set('b_isSet_interpClfer', True)
        el_cliferSlct.disabled = True
        el_featNum_form.update()
    el_tit_Clifer = ft.Text('6+. Set the classifier for interpretation: ',size=21,color=ft.colors.PURPLE)
    el_cliferSlct = ft.Dropdown(
        width=220,
        options=[
            ft.dropdown.Option("Nearest Neighbors"),
            ft.dropdown.Option("SVM(linear)"),
            ft.dropdown.Option("RBF SVM"),
            ft.dropdown.Option("Gaussian Process"),
            ft.dropdown.Option("Decision Tree"),
            ft.dropdown.Option("Random Forest"),
            ft.dropdown.Option("Neural Net"),
            ft.dropdown.Option("AdaBoost"),
            ft.dropdown.Option("Naive Bayes"),
            ft.dropdown.Option("QDA"),
            ft.dropdown.Option("xgboost"),
            ft.dropdown.Option("lightGBM"),
            ft.dropdown.Option('Gradient Boosting Classifier'),
            ft.dropdown.Option('SVC'),
            ft.dropdown.Option('ExtraTreesClassifier'),
            ft.dropdown.Option('SGDClassifier'),
            ft.dropdown.Option('BernoulliNB'),
            ft.dropdown.Option('Perceptron'),
            ft.dropdown.Option('PassiveAggressiveClassifier'),
            ft.dropdown.Option('BaggingClassifier'),
            ft.dropdown.Option('CalibratedClassifierCV'),
            ft.dropdown.Option('ExtraTreeClassifier'),
            ft.dropdown.Option('LinearDiscriminantAnalysis'),
            ft.dropdown.Option('LabelSpreading'),
            ft.dropdown.Option('LabelPropagation'),
            ft.dropdown.Option('DummyClassifier')
            ],
        on_change=f_setInterpClfer,
        )
    el_row_interpClif = ft.Row([el_tit_Clifer,el_cliferSlct])
    el_row_interpClif.visible = False
    
    ###
    def f_normCsvData(df_data):
        s_classRowRealName = ''
        ls_origFullCols = df_data.columns.values.tolist()
        for s_1colName in ls_origFullCols:
            if s_1colName.lower() == 'class':
                s_classRowRealName = s_1colName
                break
            elif s_1colName.lower() == 'type':
                s_classRowRealName = s_1colName
                break
        if s_classRowRealName == '':
            raise ErrorCoding('The default category column, whose name is class or type, cannot be found. Please check your files...')
        else:
            pass
        ser_classData_Y = df_data[s_classRowRealName]
        df_noCls = df_data.drop(columns=[s_classRowRealName])
        scaler = StandardScaler()
        ser_classData_X = scaler.fit_transform(df_noCls.T).T
        df_X = pd.DataFrame(ser_classData_X,columns=df_noCls.columns.values.tolist())
        return df_X,ser_classData_Y
    
    def f_dataPreProcess3(df_csvData,f_testRatio,s_rsmpMod_name):
        X, y = f_normCsvData(df_csvData)
        try:
            from class_resampData import c_resampData
        except:
            from files.class_resampData import c_resampData
        obj_rsamp = c_resampData(X.values.tolist(),y.values.tolist(),s_rsmpMod_name,
                                 df_csvData.columns.values.tolist())
        d_maxAcc, arr_X_resampled, ls_y_resampled, df_resampledData = obj_rsamp.f_operResampling()
        ##分割数据集
        X_train, X_test, y_train, y_test = train_test_split(arr_X_resampled, ls_y_resampled, test_size=f_testRatio, 
                                                            random_state=42)
        df_Xtrain = pd.DataFrame(np.array(X_train),columns=X.columns)
        df_Xtest = pd.DataFrame(np.array(X_test),columns=X.columns)
        arr_Y_train = np.array(y_train)
        arr_Y_test = np.array(y_test)
        df_X_resmp = pd.DataFrame(arr_X_resampled,columns=X.columns)
        ls_y_temp = [True if item==1 else False for i,item in enumerate(ls_y_resampled)]
        arr_y_resampd = np.array(ls_y_temp)
        return df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, df_X_resmp,arr_y_resampd,df_resampledData
    ###9###
    def f_checkIfProcessed(p_csvPth,f_ratioVal,s_resampMthName):
        if page.session.get('d_reapElems')['b_isRsmpxSplit']:
            df_Xtrain = page.session.get('d_reapElems')['df_Xtrain']
            df_Xtest = page.session.get('d_reapElems')['df_Xtest']
            arr_Y_train = page.session.get('d_reapElems')['arr_Y_train']
            arr_Y_test = page.session.get('d_reapElems')['arr_Y_test']
            df_X_resmp = page.session.get('d_reapElems')['df_X_resmp']
            arr_y_resampd = page.session.get('d_reapElems')['arr_y_resampd']
            df_rsmpData = page.session.get('d_reapElems')['df_rsmpData']
        else:
            df_csvData = pd.read_csv(p_csvPth)
            df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, df_X_resmp,arr_y_resampd,df_rsmpData = f_dataPreProcess3(df_csvData,f_ratioVal,s_resampMthName)
            d_paras = page.session.get('d_reapElems')
            d_paras['df_Xtrain'] = df_Xtrain
            d_paras['df_Xtest'] = df_Xtest
            d_paras['arr_Y_train'] = arr_Y_train
            d_paras['arr_Y_test'] = arr_Y_test
            d_paras['df_X_resmp'] = df_X_resmp
            d_paras['arr_y_resampd'] = arr_y_resampd
            page.session.set('d_reapElems',d_paras)
            page.session.set('b_isRsmpxSplit',True)
            page.session.set('df_rsmpData', df_rsmpData)
        return df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, df_X_resmp,arr_y_resampd,df_rsmpData
    def f_openHtml(p_htmlPth):
        import platform
        s_osInfo = platform.platform().lower()
        if "windows" in s_osInfo:
            import os
            os.startfile(p_htmlPth)
        elif "linux" in s_osInfo:
            import subprocess
            subprocess.call(["xdg-open", p_htmlPth])
        elif 'macos' in s_osInfo:
            import subprocess
            subprocess.call(["open", p_htmlPth])
        else:
            raise ErrorCoding('Your current OS cannot be recognized.')
    def startAutoML(e):
        p_csvPth = page.session.get("csvFilePth")
        f_ratioVal = page.session.get("f_testRatio")
        s_resampMthName = page.session.get('s_rsmpMod_name')
        if page.session.get('b_isSetCorCsv'):
            page.session.set('b_isInCalc', True)
        else:
            open_dlg(e)
        df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, df_X_resmp,arr_y_resampd,df_resampledData = f_checkIfProcessed(p_csvPth,f_ratioVal,s_resampMthName)

        if page.session.get('s_timeStamp')==0:
            import time
            s_timeStamp = time.strftime("%H%M%S",time.localtime())
            page.session.set('s_timeStamp', s_timeStamp)
        else:
            s_timeStamp = page.session.get('s_timeStamp')
        if page.session.get('b_isSaveResmpCsv')==0:
            s_resampedCsvFileName = ''.join(['rsmpData_',s_timeStamp,'.csv'])
            p_resmpeFilePth = f_geneAbsPath_frmROOT('interpReport',s_resampedCsvFileName)
            df_resampledData.to_csv(p_resmpeFilePth,index=False)
            page.session.set('b_isSaveResmpCsv',p_resmpeFilePth)
        else:
            pass
        try:
            from  compr_4AML.py import runAutoML
        except:
            from files.compr_4AML import runAutoML 
        s_autoML_name = page.session.get('s_autoML_name')
        ls_bestEstimatorInfo = runAutoML(s_autoML_name,df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test,s_timeStamp)
        ls_hintPret=[]
        if s_autoML_name=='flaml':
            ls_hintPret = ['Best ML leaner: ','Best hyperparmeter config: ','Best accuracy on validation data: ',
                           'Training duration of best run: ','Accuracy on test data: ']
        elif s_autoML_name=='tpot':
            ls_hintPret = ['TPOT has produced the pipeline code for the optimal classifier. Please follow the path below to see the py file\n']
        elif s_autoML_name=='lazypredict':
            ls_hintPret = ['LazyPredict has produced classification performance results for multiple classifiers, which are stored locally in an HTML document.\n You can see it based on the web page that your browser automatically opens, or you can follow the path below to view the corresponding HTML document. \n']
            f_openHtml(ls_bestEstimatorInfo[0])
        s_divBoxText = []
        for i,val in enumerate(ls_hintPret):
            s_curLine = ''.join(['='*50,'\n',val,str(ls_bestEstimatorInfo[i]),'\n'])
            s_divBoxText.append(s_curLine)
        s_divBoxText.append('\nAfter selecting the classification model, click the Generate Model Explanation Report button to generate the report')
        print(''.join(['Now that the automatic machine learning has been calculated',
              'choose a classifier for the subsequent model interpretation task ',
              'based on the results of the software window.After selecting the ', 
              'classification model, click the Generate Model Explanation Report ',
              'button to generate the report']))
        s_bestInfo_full = ''.join(s_divBoxText)
        page.session.set('b_isCalcFinish', True)
        el_bestEstiInfo.value = s_bestInfo_full
        el_bestEstiInfo.update()
        el_row_interpClif.visible = True
        page.update()
        page.session.set('b_isAutoMl_Done', True)
        
    def f_geneInterpReport(e): 
        page.session.set('b_isIn_interpCalc', True)
        p_csvPth = page.session.get("csvFilePth")
        f_ratioVal = page.session.get("f_testRatio")
        s_resampMthName = page.session.get('s_rsmpMod_name')
        i_showSampIdx = page.session.get('i_vizFeatNo')
        i_topFeatNum = page.session.get('i_topFeats_num')
        s_clfer = page.session.get('s_interpClfer')
        if page.session.get('b_isSetCorCsv'):
            page.session.set('b_isInCalc', True)
        else:
            open_dlg(e)
        i_allSampNum_rsmped = page.session.get('i_allValidNum')
        if i_allSampNum_rsmped==-9:
            el_posRangeHint.value = 'You have not entered the serial number'
            el_posRangeHint.color = ft.colors.RED
            el_posRangeHint.update()
        else:
            if i_showSampIdx>=0 and i_showSampIdx<=(i_allSampNum_rsmped-1):
                el_vizFeatNo.disabled = True
                el_vizFeatNo.update()
            else:
                el_posRangeHint.value = 'Your input No. is out of range.'
                el_posRangeHint.color = ft.colors.RED
                el_posRangeHint.update()
            
        df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, df_X_resmp,arr_y_resampd,df_resampledData = f_checkIfProcessed(p_csvPth,f_ratioVal,s_resampMthName)
        
        if page.session.get('s_timeStamp')==0:
            import time
            s_timeStamp = time.strftime("%H%M%S",time.localtime())
            page.session.set('s_timeStamp', s_timeStamp)
        else:
            s_timeStamp = page.session.get('s_timeStamp')
        if page.session.get('b_isSaveResmpCsv')==0:
            s_resampedCsvFileName = ''.join(['rsmpData_',s_timeStamp,'.csv'])
            p_resmpeFilePth = f_geneAbsPath_frmROOT('interpReport',s_resampedCsvFileName)
            df_resampledData.to_csv(p_resmpeFilePth,index=False)
            page.session.set('b_isSaveResmpCsv',p_resmpeFilePth)
        else:

            pass
        try:
            from f_interpDrawFig import mainPlotFun
            from geneVisInfoDict import d_allVisFigInfo
        except:
            from files.f_interpDrawFig import mainPlotFun
            from files.geneVisInfoDict import d_allVisFigInfo
        p_htmlnew = mainPlotFun(df_Xtrain, df_Xtest, arr_Y_train, arr_Y_test, 
                                df_X_resmp,arr_y_resampd,df_resampledData,
                                f_ratioVal,s_clfer,['pos','neg'],i_showSampIdx,
                                i_topFeatNum,d_allVisFigInfo,s_timeStamp,
                                i_allSampNum_rsmped)
        s_hintPret = 'The Html report of model interpretation has produced, which are stored locally in a local file.\n You can see it based on the web page that your browser automatically opens, or you can follow the path below to view the corresponding HTML document. \n\n'
        f_openHtml(p_htmlnew)
        s_divBoxText = []
        s_curLine = ''.join(['='*50,'\n',s_hintPret,p_htmlnew,'\n'])
        s_divBoxText.append(s_curLine)
        s_bestInfo_full = ''.join(s_divBoxText)
        page.session.set('b_isCalcFinish', True)
        el_bestEstiInfo.value = s_bestInfo_full
        el_bestEstiInfo.update()
    
    el_tit_click2Run = ft.Text('''7. Click the button below to start automatic machine learning（Complete Forms 1-4 firstly）or generate the interpreation reports for Machine learning models（Complete Forms 1-6 firstly） ''', 
                        size=21,color="#000000")
    btn_autoML_calc = ft.ElevatedButton(text="Auto Machine Learning", on_click=startAutoML,
                                 color='#0079da',disabled=True)
    btn_intpRpt_gener = ft.ElevatedButton(text="Generate the interpreation report",
                                          on_click=f_geneInterpReport,color='#0079da',
                                          disabled=True)
    r_btn_runAutoML = ft.Row([el_placeholder, btn_autoML_calc, btn_intpRpt_gener])
    
    ####line-9#####
    el_bestEstiInfo = ft.Text("",color='#000000',size=17)
    el_tit_modRslt = ft.Text('8. The results of Auto machine learning or model interpretation:', size=21)
    el_AutoResltBoard = ft.Container(
        content=el_bestEstiInfo,
        margin=10,
        padding=20,
        alignment=ft.alignment.center,
        bgcolor='#fbf9f4',#a6e3d8
        width=750,
        height=350,
        border_radius=10,
    )
    el_tit_modRslt.visible = False
    el_AutoResltBoard.visible = False
    
    ###Line-10
    el_placeholder4 = ft.Container(width=67)
    el_placeholder4_top = ft.Container(width=517,height=17)
    el_title4 = ft.Text("Automated machine learning is being calculated...", 
                        color='#1b6065',
                        style="headlineSmall")
    el_line4_tit = ft.Row([el_placeholder4,el_title4])
    el_prog4 = ft.ProgressBar(width=570, color="#dfe384", bgcolor="#eeeeee")
    el_line4_progBar = ft.Row([el_placeholder4,el_prog4])
    el_line4_tips = ft.Text("The relevant results will be shown here after calculation, please wait...", 
                        color='#8f8f8f',
                        size = 16)
    el_line4_c_tips = ft.Row([el_placeholder4,el_line4_tips])
    el_row_calcProgressBar = ft.Column([el_placeholder4_top,el_line4_tit,el_line4_progBar,el_line4_c_tips])
    el_row_calcProgressBar.visible = False
    
    def f_stastSampNum(p_csvFile, s_rsmpMthod):
        i_validNum = 0
        if page.session.get('b_isStat0_1'):
            i_validNum = int(page.session.get('i_sampNum'))
        else:
            try:
                from stats_0_1 import f_stats01
            except:
                from files.stats_0_1 import f_stats01
            i_num0,i_num1,i_colNum = f_stats01(p_csvFile)
            page.session.set('i_colNum', i_colNum)
            page.session.set('i_num0', i_num0)
            if s_rsmpMthod == 'delete':
                i_validNum = 2*i_num1 if (i_num0>=i_num1)  else 2*i_num0
            elif s_rsmpMthod == 'add':
                i_validNum = 2*i_num1 if (i_num0<=i_num1)  else 2*i_num0
            else:
                i_validNum = i_num0+i_num1
            page.session.set('b_isStat0_1', True)
            page.session.set('i_sampNum', i_validNum)
        return i_validNum
    
    def f_getCsvRsmpInsNum(p_csvFile, s_rsmpMthod):
        if p_csvFile.endswith('.csv'):
            df_csvData = pd.read_csv(p_csvFile)
        else:
            raise ErrorCoding('Error: You set a different file format, the current version only supports csv format')
        ##设置参数归一化
        X, y = f_normCsvData(df_csvData)
        try:
            from class_resampData import c_resampData
        except:
            from files.class_resampData import c_resampData
        obj_rsamp = c_resampData(X.values.tolist(),y.values.tolist(),s_rsmpMthod,
                                 df_csvData.columns.values.tolist())
        d_maxAcc, arr_X_resampled, ls_y_resampled, df_resampledData = obj_rsamp.f_operResampling()
        return df_resampledData.shape[0]
    ###checkStatus
    def check_isAllBeSetted():
        d_elementSetStaus = {
            "b_isSetCorCsv":{"name":"Csv",
                             "index":0},
            "b_isSetAutoML_model":{"name":"Auto ML model",
                             "index":1},
            "b_isSet_rsmpMod":{"name":"Resampling strategy",
                             "index":2},
            "b_isSetTopFeat_num":{"name":"the number of top important features",
                             "index":5},
            "b_isSetVizFeatNo":{"name":"the displayed features",
                             "index":4},
            "b_isSetTestRate":{"name":"the test set ratio",
                             "index":3},
            }
        ls_okForm_idxs = []
        i_noBeSetNum = 0
        b_isAllSet = False
        b_isFirstBtn_ok = False
        for key,val in d_elementSetStaus.items():
            b_isSet_i = page.session.get(key)
            if b_isSet_i:
                ls_okForm_idxs.append(d_elementSetStaus[key]["index"])
            else:
                i_noBeSetNum += 1
        if i_noBeSetNum==0:
            b_isAllSet = True
        else:
            b_isAllSet = False
            if (0 in ls_okForm_idxs) and (1 in ls_okForm_idxs) and (2 in ls_okForm_idxs) and (3 in ls_okForm_idxs):
                b_isFirstBtn_ok = True
            else:
                b_isFirstBtn_ok = False
        return b_isAllSet,b_isFirstBtn_ok
                
    def checkStatus():
        if page.session.get('b_isStat0_1'):
            pass
        else:
            if page.session.get("b_isSetCorCsv") and page.session.get("b_isSet_rsmpMod"):
                el_vizFeatNo.label = "Input the visulized sample No."
                el_vizFeatNo.disabled = False
                i_allSampNum_rsmped = f_stastSampNum(page.session.get("csvFilePth"),
                                                     page.session.get("s_rsmpMod_name"))
                page.session.set('i_allValidNum', i_allSampNum_rsmped-1)
                el_vizFeatNo.hint_text = ''.join(['0~',str(i_allSampNum_rsmped-1)])
                btn_autoML_calc.disabled = True
                if page.session.get("s_rsmpMod_name")=='add' or page.session.get("s_rsmpMod_name")=='delete':
                    s_posNumHint = ''.join(['Neg: 0~',str(int(i_allSampNum_rsmped/2)-1)])
                else:
                    s_posNumHint = ''.join(['Neg: 0~',str(int(page.session.get('i_num0'))-1)])
                el_posRangeHint.value = s_posNumHint
                page.update()
            else:
                el_vizFeatNo.label = "You have not set the csv file and resampling method."
                el_vizFeatNo.disabled = True
                page.update()
        b_isAllSet,b_is1stBtn_ok = check_isAllBeSetted()
        
        if b_is1stBtn_ok and (not page.session.get('b_isInCalc')):
            btn_autoML_calc.disabled = False
        if b_is1stBtn_ok and (page.session.get('b_isInCalc')):
            btn_autoML_calc.disabled = True
        if page.session.get('b_isCalcFinish') and page.session.get("b_isSet_interpClfer"):
            if page.session.get('b_isIn_interpCalc'):
                btn_intpRpt_gener.disabled = True
            else:
                btn_intpRpt_gener.disabled = False
        if page.session.get('b_isInCalc'):
            if page.session.get('b_isCalcFinish'):
                el_row_calcProgressBar.visible = False
                el_tit_modRslt.visible = True
                el_AutoResltBoard.visible = True
                page.update()
            else:
                el_row_calcProgressBar.visible = True
                el_tit_modRslt.visible = False
                el_AutoResltBoard.visible = False
                btn_autoML_calc.disabled = True
                page.update()
        else:
            pass
        page.update()
    ##
    class RepeatingTimer(Timer):
        def run(self):
            while not self.finished.is_set():
                self.function(*self.args, **self.kwargs)
                self.finished.wait(self.interval)
    t = RepeatingTimer(0.05,checkStatus)
    t.start()        
    
    ##--------------------------
    #####bottom###################
    el_mainLayout = ft.Column(
        controls=[
            header,
            el_row_fileSlct_title,
            el_row_fileSlct_form,
            el_row_autoMod,
            el_row_resampSet,
            el_row_ratio,
            el_row_visFeatNo,
            el_row_topFeatSet,
            el_row_interpClif,
            el_tit_click2Run,
            r_btn_runAutoML,
            el_tit_modRslt,
            el_AutoResltBoard,
            el_row_calcProgressBar
        ])
    ####The End--------
    page.add(el_mainLayout)
    page.update()

if __name__ == "__main__":
    ft.app(target=main)