#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 21:59:39 2023
@author: sealight
"""
import os
class ErrorCoding(Exception):
    pass
# def f_mljarLearn(X_train, X_test, y_train, y_test):
#     from supervised.automl import AutoML as mAutoML
#     automl = mAutoML()
#     automl.fit(X_train, y_train)
#     automl.report()
#     try:
#         from geneSmartPth_mini import f_geneAbsPath_frmROOT
#     except:
#         from files.geneSmartPth_mini import f_geneAbsPath_frmROOT
#     p_htmlReportPth = f_geneAbsPath_frmROOT(automl._results_path,'README.html')
#     if os.path.isfile(p_htmlReportPth):
#         pass
#     else:
#         raise ErrorCoding("The html report of mlJar is not exist in the file.")
#     return [automl._best_model.get_name(),p_htmlReportPth]
def f_flamlLearn(X_train, X_test, y_train, y_test):
    from flaml import AutoML
    from flaml.ml import sklearn_metric_loss_score
    automl = AutoML()
    automl_settings = {
         "time_budget": 300,  
         "metric": 'accuracy',
         "task": 'classification',
    }
    automl.fit(X_train=X_train, y_train=y_train,**automl_settings)
    y_pred = automl.predict(X_test)
    test_accuracy = 1 - sklearn_metric_loss_score('accuracy', y_pred, y_test)
    print(f'Accuracy on test data: {test_accuracy}')
    return [automl.best_estimator,automl.best_config, automl.best_loss, automl.best_config_train_time,test_accuracy]
def f_tpot(X_train, X_test, y_train, y_test,s_timeStamp):
    from tpot import TPOTClassifier
    tpot = TPOTClassifier(generations=5, population_size=20, verbosity=2,
                          random_state=42)
    tpot.fit(X_train, y_train)
    print(tpot.score(X_test, y_test))
    try:
        from geneSmartPth_mini import f_geneAbsPath_frmROOT
    except:
        from files.geneSmartPth_mini import f_geneAbsPath_frmROOT
    s_clferFileName = ''.join(['tpot_clfer_code_',s_timeStamp,'.py'])
    p_bestClfier_codeFile = f_geneAbsPath_frmROOT('interpReport',s_clferFileName)
    tpot.export(p_bestClfier_codeFile)
    ls_allCodes = []
    try:
        with open(p_bestClfier_codeFile,'r') as fid:
            for s_line_i in fid.readlines():
                ls_allCodes.append(s_line_i)
    except:
        raise ErrorCoding('An error occurred while reading the py file produced by TPOT')
    s_allCodes = ''.join(ls_allCodes)
    print('The codes for the py file produced by TPOT are as follows: ')
    print('-'*40)
    print('         Codes Start      ')
    print('-'*40)
    print(s_allCodes)
    print('-'*40)
    print('         Codes Ends       ')
    print('-'*40)
    return [p_bestClfier_codeFile]
def f_writeLazyHtml(df_model,p_htmlPth):
    try:
        from geneSmartPth_mini import f_geneAbsPath_frmROOT
    except:
        from files.geneSmartPth_mini import f_geneAbsPath_frmROOT
    p_htmlPreTextFile = f_geneAbsPath_frmROOT('files','lazyRept.txt')
    html_string_pre = ''
    try:
        with open(p_htmlPreTextFile,'r') as f_lazyFile:
            for s_line_i in f_lazyFile.readlines():
                html_string_pre += s_line_i
    except:
        raise ErrorCoding('An error occurred while reading "lazyrept.txt"')
    html_str_suff = '</div><hr><div id="bottomInfo"><div id="btmInfoInBox">This report is generated by iProps v1.00.<br>&copy;right reserved</div></div><footer></footer></body></html>'
    with open(p_htmlPth, 'w') as f:
        f.write(html_string_pre)
        f.write("<table>")
        for header in df_model.columns.values:
            f.write("<th>" + str(header) + "</th>")
        for i in range(len(df_model)):
            f.write("<tr>")
            for col in df_model.columns:
                value = df_model.iloc[i][col]
                if isinstance(value, str):
                    s_tdVal = value
                else:
                    s_tdVal = '{:.4f}'.format(value)
                f.write("<td>" + s_tdVal + "</td>")
            f.write("</tr>")
        f.write("</table>")
        f.write(html_str_suff)
def f_lazyPred(X_train, X_test, y_train, y_test,s_timeStamp):
    from lazypredict.Supervised import LazyClassifier
    clf = LazyClassifier(ignore_warnings=False, custom_metric=None)
    models, predictions = clf.fit(X_train, X_test, y_train, y_test)
    try:
        from geneSmartPth_mini import f_geneAbsPath_frmROOT
    except:
        from files.geneSmartPth_mini import f_geneAbsPath_frmROOT
    s_clferFileName = ''.join(['lazyPredResult_',s_timeStamp,'.html'])
    p_lazyPredReslt_htmlPth = f_geneAbsPath_frmROOT('interpReport',s_clferFileName)
    df_modModels = models.reset_index()
    f_writeLazyHtml(df_modModels,p_lazyPredReslt_htmlPth)
    return [p_lazyPredReslt_htmlPth]
def runAutoML(s_modelName, X_train, X_test, y_train, y_test,s_timeStamp):
    if s_modelName=="flaml":
        ls_metrics = f_flamlLearn(X_train, X_test, y_train, y_test)
        return ls_metrics
    # elif s_modelName=="mljar":
    #     ls_resultInfo = f_mljarLearn(X_train, X_test, y_train, y_test)
    #     return ls_resultInfo
    elif s_modelName=="tpot":
        ls_resultInfo = f_tpot(X_train, X_test, y_train, y_test,s_timeStamp)
        return ls_resultInfo
    elif s_modelName=="lazypredict":
        ls_resultInfo = f_lazyPred(X_train, X_test, y_train, y_test,s_timeStamp)
        return ls_resultInfo
    else:
        raise ErrorCoding("You provide a wrong autoML name,only flaml/tpot/lazypredict is supportted.")